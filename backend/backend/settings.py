"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# Register psycopg2cffi as psycopg2 before any Django imports
try:
    import psycopg2_compat
except ImportError:
    pass

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in project root
PROJECT_ROOT = BASE_DIR.parent
load_dotenv(PROJECT_ROOT / '.env')

# Add backend directory to Python path to enable imports
import sys
if str(BASE_DIR) not in sys.path:  # Add backend directory directly
    sys.path.insert(0, str(BASE_DIR))
# Removed PROJECT_ROOT to avoid conflicts with src directory elsewhere


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Host Configuration
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", ".onrender.com,localhost,127.0.0.1").split(",")



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "auth_app",
    "admin_app",
    "dataset_app",
    "viz_app",
    "jobs_app",
    "chat_app",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"



# Database Configuration - PostgreSQL Cloud Database (for Argo Float Data)
# Priority: DATABASE_URL > DATABASE_URI > SQLite fallback
database_url = os.environ.get('DATABASE_URL') or os.environ.get('DATABASE_URI')

if database_url:
    try:
        import dj_database_url
        DATABASES = {
            'default': dj_database_url.parse(database_url, conn_max_age=600)
        }
        # Neon pooled connections don't support search_path option
        # Remove any OPTIONS that might have been set
        if 'OPTIONS' in DATABASES['default']:
            del DATABASES['default']['OPTIONS']
        
        db_name = DATABASES['default'].get('NAME', 'unknown')
        db_host = DATABASES['default'].get('HOST', 'unknown')
        print(f"‚úÖ Using PostgreSQL Cloud Database: {db_name} on {db_host}")
        print(f"   üìä All data (datasets, values, embeddings) will be stored in cloud")
    except ImportError:
        print("‚ùå ERROR: dj-database-url not installed! Install with: pip install dj-database-url")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        print("‚ö†Ô∏è Falling back to SQLite (LOCAL ONLY - NOT CLOUD)")
    except Exception as e:
        print(f"‚ùå ERROR parsing database URL: {e}")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        print("‚ö†Ô∏è Falling back to SQLite (LOCAL ONLY - NOT CLOUD)")
else:
    # No cloud database configured - use local SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("‚ö†Ô∏è No DATABASE_URL or DATABASE_URI found in environment")
    print("‚ö†Ô∏è Using SQLite (LOCAL ONLY - NOT CLOUD)")
    print("üí° To use cloud database, set DATABASE_URL in .env file")

# NetCDF processing settings
NETCDF_SETTINGS = {
    'MAX_FILE_SIZE': 100 * 1024 * 1024,  # 100MB
    'ALLOWED_EXTENSIONS': ['.nc'],
    'TEMP_DIR': os.path.join(BASE_DIR, 'media', 'temp'),
    'CHUNK_SIZE': 1000,  # Process in chunks for large files
}

# Embedding model settings
EMBEDDING_SETTINGS = {
    'MODEL_NAME': 'sentence-transformers/all-MiniLM-L6-v2',
    'VECTOR_DIMENSIONS': 768,
    'BATCH_SIZE': 32,
}


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Production Security Settings
if not DEBUG:
    # Security settings for production
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# Suppress TensorFlow warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# CRITICAL: Speed up matplotlib by skipping font cache rebuild
os.environ['MPLCONFIGDIR'] = '/tmp/matplotlib'  # Use temp directory
os.environ['MPLBACKEND'] = 'Agg'  # Non-interactive backend
# Skip font cache completely - use default fonts only
import matplotlib
matplotlib.use('Agg', force=True)
matplotlib.rcParams['font.family'] = 'DejaVu Sans'  # Use default font only
matplotlib.rcParams['font.sans-serif'] = ['DejaVu Sans']  # Single font
matplotlib.rcParams['axes.unicode_minus'] = False  # Skip special chars
import matplotlib.pyplot as plt
plt.ioff()  # Turn off interactive mode
# Force use of existing font cache without rebuild
import matplotlib.font_manager
matplotlib.font_manager.fontManager.findfont('DejaVu Sans', rebuild_if_missing=False)
print("‚úÖ Matplotlib configured with fast font loading (no rebuild)")

AUTH_USER_MODEL = "auth_app.CustomUser"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',  # Changed to allow public access by default
    )
}

# CORS settings - Handle both HTTP and HTTPS properly
CORS_ALLOWED_ORIGINS = [
    origin.strip().rstrip('/') for origin in os.environ.get(
        "CORS_ALLOWED_ORIGINS",
        "https://float-chat-vyuga.vercel.app,https://floatchat-backend-z6ws.onrender.com,http://localhost:3000,http://localhost:5173,https://localhost:3000,https://localhost:5173"
    ).split(",")
]

# CORS configuration for development and production
CORS_ALLOW_CREDENTIALS = True
# Allow all origins for development - restrict in production
CORS_ALLOW_ALL_ORIGINS = True

# HTTPS/HTTP Security Settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_TLS = os.environ.get('USE_TLS', 'False') == 'True'
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False') == 'True'

# Emergency CORS fix - Allow Vercel origins with pattern matching
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.vercel\.app$",
    r"^https://float-chat-vyuga\.vercel\.app$",
]

# Additional CORS settings for preflight requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Celery Configuration - Disabled for simple deployment
# Uncomment when Redis server is available:
# CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE
