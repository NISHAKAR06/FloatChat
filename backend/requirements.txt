# FINAL WORKING SETUP - PostgreSQL + ARGO Chat Features ðŸš€

# Core Django
django==4.2.16
djangorestframework==3.14.0
djangorestframework-simplejwt==5.3.0
whitenoise[brotli]==6.6.0
django-cors-headers==4.3.1
requests==2.31.0
python-dotenv==1.0.1
gunicorn==20.1.0

# PostgreSQL
psycopg2cffi==2.9.0  # Pure Python PostgreSQL adapter (works with Python 3.13)
dj-database-url==2.1.0  # For PostgreSQL connection URLs
sqlalchemy==2.0.32  # Required for FastAPI database operations

# ARGO Chat Dependencies - Required for chat functionality (Python 3.13 compatible)
# Using versions with guaranteed pre-built wheels for Python 3.13
numpy>=2.0.0,<3.0.0  # Python 3.13 compatible with pre-built wheels
pandas>=2.2.0  # Will use latest with pre-built wheels
xarray>=2024.0.0
netCDF4>=1.6.0  # More flexible version
scipy>=1.13.0  # Required by xarray/matplotlib
matplotlib>=3.8.0
plotly>=5.18.0
kaleido>=0.2.0

# FastAPI service (for RAG pipeline) - Python 3.13 compatible
fastapi==0.109.0
uvicorn==0.27.0
pydantic==2.5.0
httpx==0.27.0  # Required for async HTTP requests

# AI/LLM Integration (for RAG pipeline)
groq==0.9.0  # Groq API client for fast LLM inference
# ollama  # Optional - only for local Ollama setup

# MCP Server (Model Context Protocol) - Python 3.13 compatible
mcp==1.0.0  # Model Context Protocol server

# Optional - Advanced AI packages (uncomment if needed for embeddings)
# sentence-transformers>=2.7.0  # For local embeddings
# faiss-cpu>=1.8.0  # For vector similarity search
# transformers>=4.40.0  # HuggingFace transformers
# torch>=2.3.0  # PyTorch for ML models
